/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applic_mail;

import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Address;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Store;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author John
 */
public class inboxPanel extends javax.swing.JPanel {
    
    private Store storeMail;
    private Message[] messageList;
    private ArrayList<Message> messageAffiche;
    private Folder fichierMail;
    
    private File dossierPieceJointe;

    /**
     * Creates new form inboxPanel
     */
    public inboxPanel() {
        initComponents();
        inboxList.setModel(new DefaultListModel());
        pieceJointeLabel.setVisible(false);
        telechargerButton.setVisible(false);
    }
    
    public void setStore(Store s)
    {
        storeMail = s;
        
        try {
            fichierMail = storeMail.getFolder("INBOX");
            fichierMail.open(Folder.READ_WRITE);
        } catch (MessagingException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);//TO DO message erreur;
        }
    }
    
    public synchronized void refreshMailList()
    {
        try {
            //Si le fichier est déjà ouvert on doit le fermer pour rafraichir
            if(fichierMail.isOpen())
                fichierMail.close(true);
            
            fichierMail = storeMail.getFolder("INBOX");
            fichierMail.open(Folder.READ_WRITE);
            messageList = fichierMail.getMessages();
        } catch (MessagingException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);//TO DO message d'erreur
        }

        messageAffiche = new ArrayList<>();
        //On parcours la liste des messages à l'envers (ordre de reception)
        for(int i = messageList.length-1; i >= 0 ; i--)
        {
            messageAffiche.add(messageList[i]);
        }
        
        refreshJlist();
    }
    
    //Methode pour rafraichir l'affichage des mails dans le GUI
    private void refreshJlist()
    {
        //On vide la liste
        DefaultListModel l = (DefaultListModel) inboxList.getModel();
        l.clear();
        
        try
        {
            for(Message m : messageAffiche)
                l.addElement(m.getSubject());
        } 
        catch (MessagingException ex) 
        {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);//TO DO message d'erreur
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inboxList = new javax.swing.JList();
        inboxLabel = new javax.swing.JLabel();
        nouveauButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        contenusTextArea = new javax.swing.JTextArea();
        fromLabel = new javax.swing.JLabel();
        receiveDateLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        supprimerButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        telechargerButton = new javax.swing.JButton();
        pieceJointeLabel = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        inboxList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inboxListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inboxList);

        inboxLabel.setText("Inbox : ");

        nouveauButton.setText("Nouveau");
        nouveauButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouveauButtonActionPerformed(evt);
            }
        });

        contenusTextArea.setEditable(false);
        contenusTextArea.setColumns(20);
        contenusTextArea.setLineWrap(true);
        contenusTextArea.setRows(5);
        jScrollPane2.setViewportView(contenusTextArea);

        fromLabel.setText("From : ");

        receiveDateLabel.setText("Date : ");
        receiveDateLabel.setToolTipText("");

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        supprimerButton.setText("Supprimer");
        supprimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Rafraichir");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        telechargerButton.setText("Télécharger la pièce jointe");
        telechargerButton.setToolTipText("");
        telechargerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telechargerButtonActionPerformed(evt);
            }
        });

        pieceJointeLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inboxLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nouveauButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(supprimerButton))
                                    .addComponent(fromLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(receiveDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                                .addComponent(pieceJointeLabel)
                                .addGap(97, 97, 97)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(refreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(logoutButton))
                            .addComponent(telechargerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13))
                    .addComponent(jScrollPane2))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(telechargerButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nouveauButton)
                            .addComponent(logoutButton)
                            .addComponent(supprimerButton)
                            .addComponent(refreshButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromLabel)
                            .addComponent(inboxLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(receiveDateLabel)
                            .addComponent(pieceJointeLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nouveauButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouveauButtonActionPerformed
        GUI_Mail container = (GUI_Mail)SwingUtilities.getWindowAncestor(this);
        container.changeLayout("nouveauMessage");
    }//GEN-LAST:event_nouveauButtonActionPerformed
    
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        
        try {
            fichierMail.close(true);
            storeMail.close();
        } catch (MessagingException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);//TO DO message erreur
        }
        
        GUI_Mail container = (GUI_Mail)SwingUtilities.getWindowAncestor(this);
        container.changeLayout("connexion");
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void supprimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerButtonActionPerformed
        if(inboxList.getSelectedIndex() < 0)
            return;
        //Recuperation du mail dans la liste
        Message m = messageAffiche.get(inboxList.getSelectedIndex());
        
        //On affiche une boite de dialog pour confirmer la suppression
        int optionDialogue = JOptionPane.YES_NO_OPTION;
        try {
            optionDialogue = JOptionPane.showConfirmDialog(null, "Voulez vous vraiment supprimer ce mail : " + m.getSubject(),"Demande suppression" ,optionDialogue);
        } catch (MessagingException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);//TO DO message erreur
        }
        
        //Le mail est marque à supprimer (pop3 supprime définitivement à la fermeture du fichier)
        if(optionDialogue == JOptionPane.YES_OPTION)
        {
            try {
                m.setFlag(Flags.Flag.DELETED, true);
                messageAffiche.remove(m);//On supprime le mail de la liste
                refreshJlist();//On rafraichis l'affichage
            } catch (MessagingException ex) {
                Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);//TO DO message d'erreur
            }
        }
    }//GEN-LAST:event_supprimerButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshMailList();
    }//GEN-LAST:event_refreshButtonActionPerformed

//Affichage des messages quand on en sélectionne un avec la souris
    private void inboxListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxListMouseClicked
        if(inboxList.getSelectedIndex() < 0)
            return;
        
        pieceJointeLabel.setVisible(false);
        telechargerButton.setVisible(false);
        Message m = messageAffiche.get(inboxList.getSelectedIndex());
        
        try {
            if(m.isMimeType("text/plain"))//Le mail est juste du texte
                contenusTextArea.setText(m.getContent().toString());
            else//Le mail est composé de plusieurs parties
            {
                Multipart contenu = (Multipart)m.getContent();
                
                int nbrDeMorceaux = contenu.getCount();
                
                for(int cpt = 0; cpt < nbrDeMorceaux; cpt++)
                {
                    Part morceau = contenu.getBodyPart(cpt);
                    
                    //Récupération de l'emplacement dela pièce jointe (dans le mail ou sur un serveur distant)
                    String disposition  = morceau.getDisposition();
                    
                    if(morceau.isMimeType("text/plain") && disposition == null)//Si c'est du text
                    {
                        contenusTextArea.setText(morceau.getContent().toString());
                    }
                    //piece jointe
                    if(disposition != null && disposition.equalsIgnoreCase(Part.ATTACHMENT))
                    {   
                        Path documentRecus = Paths.get(morceau.getFileName());
                        
                        pieceJointeLabel.setVisible(true);
                        pieceJointeLabel.setText("Piece jointe : " + documentRecus.getFileName().toString());
                        telechargerButton.setVisible(true);
                    }
                }
            }
            
            //Parcours de la liste des personnes qui ont envoyé un mail
            String from = "From : ";
            for(Address a : m.getFrom())
            {
                from += " "+a.toString();
            }
            fromLabel.setText(from);
            
            //Date de reception TO DO
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            receiveDateLabel.setText(df.format(m.getSentDate()));
        } catch (IOException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inboxListMouseClicked
    
    
    //Creation du dossier pour les pieces jointes du user en cours (si necessaire)
    public void createDirectory(String user)
    {
        dossierPieceJointe = new File(user);
        
        if(!dossierPieceJointe.exists())
            dossierPieceJointe.mkdir();
    }
    
    
    private void telechargerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telechargerButtonActionPerformed
        Message m = messageAffiche.get(inboxList.getSelectedIndex());
        
        try
        {
            Multipart contenu = (Multipart)m.getContent();

            int nbrDeMorceaux = contenu.getCount();

            for(int cpt = 0; cpt < nbrDeMorceaux; cpt++)
            {
                Part morceau = contenu.getBodyPart(cpt);

                //Récupération de l'emplacement dela pièce jointe (dans le mail ou sur un serveur distant)
                String disposition  = morceau.getDisposition();

                if(disposition != null && disposition.equalsIgnoreCase(Part.ATTACHMENT))
                {
                    InputStream is = morceau.getInputStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    int carac;

                    while((carac = is.read()) != -1)
                    baos.write(carac);

                    baos.flush();

                    Path documentRecus = Paths.get(morceau.getFileName());

                    String fileName = dossierPieceJointe.getAbsolutePath() + System.getProperty("file.separator");
                    fileName += documentRecus.getFileName().toString();//On recupere juste le nom du fichier reçus sans le path 

                    FileOutputStream fos = new FileOutputStream(fileName);

                    baos.writeTo(fos);
                    fos.close();
                    
                    Desktop.getDesktop().open(new File(fileName));
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(inboxPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_telechargerButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea contenusTextArea;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel inboxLabel;
    private javax.swing.JList inboxList;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton nouveauButton;
    private javax.swing.JLabel pieceJointeLabel;
    private javax.swing.JLabel receiveDateLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton supprimerButton;
    private javax.swing.JButton telechargerButton;
    // End of variables declaration//GEN-END:variables
}
