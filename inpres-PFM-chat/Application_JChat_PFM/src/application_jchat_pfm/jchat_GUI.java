/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application_jchat_pfm;

import java.io.*;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Random;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Jerome
 */
public class jchat_GUI extends javax.swing.JFrame {
    
    private String adresse_serveur;
    private int port_serveur;
    
    MulticastSocket udp_sock;
    private int port_UDP;
    private InetAddress ip_udp;
    private DataInputStream dis;
    private DataOutputStream dos;
    
    private ArrayList<message> messageList;
    private String curUser;
    private ThreadReception thr;

    /**
     * Creates new form jchat_GUI
     */
    public jchat_GUI(String ip, int p) {
        initComponents();
        port_serveur = p;
        adresse_serveur = ip;
        errorLabel.setVisible(false);
        displayTextArea.setEditable(false);
        envoyerButton.setEnabled(false);
        subjectList.setSelectedIndex(1);
        erreurEnvoisLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginLabel = new javax.swing.JLabel();
        loginTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        connexionButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        subjectList = new javax.swing.JList();
        filtreLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        messageLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ecritureTextaArea = new javax.swing.JTextArea();
        envoyerButton = new javax.swing.JButton();
        typeMessageCombo = new javax.swing.JComboBox();
        erreurEnvoisLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loginLabel.setText("Login : ");

        passwordLabel.setText("mot de passe : ");

        connexionButton.setText("Connexion");
        connexionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexionButtonActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText("jLabel1");

        subjectList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Tous", "Infos", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        subjectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                subjectListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(subjectList);

        filtreLabel.setText("Filtres");

        displayTextArea.setColumns(20);
        displayTextArea.setRows(5);
        jScrollPane2.setViewportView(displayTextArea);

        messageLabel.setText("message : ");

        ecritureTextaArea.setColumns(20);
        ecritureTextaArea.setRows(5);
        jScrollPane3.setViewportView(ecritureTextaArea);

        envoyerButton.setText("Envoyer");
        envoyerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envoyerButtonActionPerformed(evt);
            }
        });

        typeMessageCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nouvelle question", "RÃ©pondre", "Info" }));

        erreurEnvoisLabel.setForeground(new java.awt.Color(255, 0, 0));
        erreurEnvoisLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(messageLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(loginLabel)
                                        .addGap(16, 16, 16)
                                        .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(passwordLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(connexionButton))
                            .addComponent(errorLabel))
                        .addContainerGap(71, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filtreLabel)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(envoyerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(typeMessageCombo, 0, 199, Short.MAX_VALUE)))))
                            .addComponent(erreurEnvoisLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel)
                    .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connexionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel)
                .addGap(8, 8, 8)
                .addComponent(filtreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(envoyerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeMessageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erreurEnvoisLabel)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connexionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexionButtonActionPerformed
        errorLabel.setVisible(false);
        Socket cliSock = null;
       
       //CAS DE LA DECONNEXION
        if(connexionButton.getText().equals("Deconnexion"))
        {
            udp_sock.close();

            connexionButton.setText("Connexion");
            envoyerButton.setEnabled(false);
            curUser = null;
            return;
       }
       //CAS DE LA CONNEXION
        try
        {
            cliSock = new Socket(adresse_serveur, port_serveur);
            System.out.println(cliSock.getInetAddress().toString());
            dis = new DataInputStream(new BufferedInputStream(cliSock.getInputStream()));
            dos = new DataOutputStream(new BufferedOutputStream(cliSock.getOutputStream()));
        }
        catch(UnknownHostException e)
        {
            System.err.println("ClientServeurBateau : Host non trouvÃ© : " + e);
        }
        catch(IOException e)
        {
            System.err.println("ClientServeurBateau : Pas de connexion ? : " + e);
        }
       
       
        String sel1 = UUID.randomUUID().toString();
        String sel2 = Calendar.getInstance().getTime().toString();
        String pwd =  sel2+passwordField.getText()+sel1;

        int saltedDigest = hashFunction(pwd);
        
        SendMsg("LOGIN_GROUP#"+loginTextField.getText()+"#"+saltedDigest+"#"+sel1+"#"+sel2);
        
        String[] parts = ReceiveMsg().split("#");
        if(parts[0].equals("ERR"))
        {
            errorLabel.setText(parts[1]);
            errorLabel.setVisible(true);
            return;
        }
        
        try {//On a plus besoin du serveur de login on se dÃ©connecte
            cliSock.close();
            dis.close();
            dos.close();
        } catch (IOException ex) {
            System.err.println("Erreur fermeture socket serveur chat " + ex);
        }
        
        //des trucs dans le GUI pour faire jolis
        connexionButton.setText("Deconnexion");
        messageList =  new ArrayList<>();
        envoyerButton.setEnabled(true);
        curUser = loginTextField.getText();
        
        try {
            //On va crÃ©er la socket UDP
            ip_udp = InetAddress.getByName(parts[1]);
            port_UDP = Integer.parseInt(parts[2]);//port envoyÃ© par le serveur
            
            udp_sock =  new MulticastSocket(port_UDP);
            udp_sock.joinGroup(ip_udp);
        } catch (UnknownHostException ex) {
            System.err.println("Erreur d'ouverture de la socket UDP " + ex);
        } catch (IOException ex) {
            System.err.println("Erreur d'ouverture de la socket UDP " + ex);
        }
        //dÃ©marrage du thread de reception de message UDP.
        thr =  new ThreadReception(udp_sock, messageList, this);
        thr.start();
    }//GEN-LAST:event_connexionButtonActionPerformed

    private void envoyerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envoyerButtonActionPerformed
        
        if(ecritureTextaArea.getText().isEmpty()) // barriÃ¨re anti spam
            return;    
        
        erreurEnvoisLabel.setVisible(false);
        
        //Creation du tag pour le message
        String tag = "Infos";
        String digest = null;
        if(typeMessageCombo.getSelectedIndex() == 1) // si on a sÃ©lectionner une nouvelle question
        {
            if(subjectList.getSelectedIndex() == 0 || subjectList.getSelectedIndex() == 1) // si on essaye de rÃ©pondre sur 
            {
                erreurEnvoisLabel.setText("SÃ©lectionnÃ© dans la liste la question Ã  laquelle vous souhaitez rÃ©pondre");
                erreurEnvoisLabel.setVisible(true);
                return;
            }
            tag = subjectList.getSelectedValue().toString();
        }
        else if(typeMessageCombo.getSelectedIndex() == 0)// on gÃ©nÃ¨re un tag pour la nouvelle question
        {
            boolean idIsUsed = true;
            
            while(idIsUsed)
            {
                idIsUsed =  false;
                Random rand = new Random();
                tag = "Q"+rand.nextInt(999);
                
                for(int i = 2; i < subjectList.getModel().getSize(); i++)//on verifie qu'une autre question n'est pas ouverte Ã  ce tag
                    if(subjectList.getModel().getElementAt(i).equals(tag))
                        idIsUsed = true;
            }
            //On construit un digest sur la question
        }

        System.err.println(typeMessageCombo.getSelectedIndex());
        
        String message = curUser +"#"+tag+"#"+ecritureTextaArea.getText();
        
        //On transforme le message en byte pour l'envoyer dans le datagramme
        byte[] buff;
        buff = message.getBytes();
        
        DatagramPacket paquet = new DatagramPacket(buff, buff.length, ip_udp, port_UDP);
        try {
            udp_sock.send(paquet);
        } catch (IOException ex) {
            System.err.println("Erreur d'envois de message. Client chat ligne 284 " + ex);
        }
        ecritureTextaArea.setText(""); // on vide la textArea.
    }//GEN-LAST:event_envoyerButtonActionPerformed
    
    //On change de selection dans la Jlist
    private void subjectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_subjectListValueChanged
        
        if(messageList ==  null || subjectList.getValueIsAdjusting())
            return;
        
        displayTextArea.setText("");
        for(message m : messageList)
        {
            if(m.getTag().equals(subjectList.getSelectedValue()) || subjectList.getSelectedValue().equals("Tous"))
                displayTextArea.append(m.getMessage() + "\n");
        }
    }//GEN-LAST:event_subjectListValueChanged

   
    //met Ã  jour la texte area lors de la reception d'un message (appelÃ© par le thread de reception)
    public void refreshDisplay()
    {
        message messageEntrant = messageList.get(messageList.size()-1);
        if(subjectList.getSelectedValue().equals("Tous") || subjectList.getSelectedValue().equals(messageEntrant.getTag()))
            displayTextArea.append(messageEntrant.getMessage()+"\n");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jchat_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jchat_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jchat_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jchat_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jchat_GUI("localhost", 31047).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connexionButton;
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JTextArea ecritureTextaArea;
    private javax.swing.JButton envoyerButton;
    private javax.swing.JLabel erreurEnvoisLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel filtreLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JTextField loginTextField;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JList subjectList;
    private javax.swing.JComboBox typeMessageCombo;
    // End of variables declaration//GEN-END:variables
    /* Envoi d'un message au client */
    public void SendMsg(String msg)
    {
        String chargeUtile = msg;
        int taille = chargeUtile.length();
        StringBuffer message = new StringBuffer(String.valueOf(taille) + "#" + chargeUtile);
            
        try
        {               
            dos.write(message.toString().getBytes());
            dos.flush();
        }
        catch(IOException e)
        {
            System.err.println("RunnableTraitement : Erreur d'envoi de msg (IO) : " + e);
        }
    }
    
    /* RÃ©ception d'un message du client */
    public String ReceiveMsg()
    {
        byte b;
        StringBuffer taille = new StringBuffer();
        StringBuffer message = new StringBuffer();
        
        try
        {
            while ((b = dis.readByte()) != (byte)'#')
            {                   
                if (b != (byte)'#')
                    taille.append((char)b);
            }
                
            for (int i = 0; i < Integer.parseInt(taille.toString()); i++)
            {
                b = dis.readByte();
                message.append((char)b);
            }  
        }
        catch(IOException e)
        {
            System.err.println("RunnableTraitement : Erreur de reception de msg (IO) : " + e);
        }
            
        return message.toString();
    }
    
    private int hashFunction(String message)
    {
        int hashValue = 0;
        
        for(int i = 0; i < message.length(); i++)
            hashValue += (int)message.charAt(i);
        
        return hashValue%67;
    }
}
